import streamlit as st
import pandas as pd

def load_raw_commune_data(commune_path):
    """
    Charge le fichier CSV brut des donn√©es communales et le retourne sous forme de DataFrame.
    """
    df_communes = pd.read_csv(commune_path)  # Charger les donn√©es du fichier CSV des communes
    return df_communes

def load_and_clean_data(presidentielle_path, commune_path):
    """
    Charge et nettoie les donn√©es des fichiers CSV/XLS des √©lections pr√©sidentielles et des communes.
    Retourne les DataFrames nettoy√©s et fusionn√©s.
    """

    # Charger le fichier Excel des r√©sultats de la pr√©sidentielle sans ignorer les lignes
    df_presidentielle_brut = pd.read_excel(presidentielle_path, engine='xlrd')  # Sans 'skiprows'
    
    # Charger les donn√©es avec 'skiprows' pour ignorer les 3 premi√®res lignes
    df_presidentielle = pd.read_excel(presidentielle_path, engine='xlrd', skiprows=3)

    # Charger les donn√©es brutes des communes
    df_communes = load_raw_commune_data(commune_path)

    # S√©lectionner les colonnes pertinentes dans le dataset pr√©sidentiel
    columns_to_keep = [
        'Code du d√©partement', 'Libell√© du d√©partement', 'Code de la commune', 'Libell√© de la commune',
        'Inscrits', 'Abstentions', 'Votants', 'Blancs', 'Nuls', 'Exprim√©s'
    ]

    # Ajouter les colonnes pour les noms, pr√©noms et voix des candidats
    for i in range(11):  # Boucle pour g√©rer les colonnes de plusieurs candidats
        if i == 0:
            columns_to_keep.extend([f'Nom', f'Pr√©nom', f'Voix'])
        else:
            columns_to_keep.extend([f'Nom.{i}', f'Pr√©nom.{i}', f'Voix.{i}'])

    # Nettoyer le dataset pr√©sidentiel en s√©lectionnant uniquement les colonnes pertinentes
    df_presidentielle_clean = df_presidentielle[columns_to_keep].copy()

    # Convertir les codes de d√©partement et commune en cha√Ænes de caract√®res et cr√©er un code combin√© unique
    df_presidentielle_clean['Code du d√©partement'] = df_presidentielle_clean['Code du d√©partement'].astype(str)
    df_presidentielle_clean['Code de la commune'] = df_presidentielle_clean['Code de la commune'].astype(str)
    df_presidentielle_clean['code_commune_combined'] = df_presidentielle_clean['Code du d√©partement'] + df_presidentielle_clean['Code de la commune'].str.zfill(3)

    # Nettoyer les donn√©es des communes en s√©lectionnant les colonnes pertinentes
    columns_to_keep_communes = [
        'code_commune_INSEE', 'nom_commune_postal', 'code_postal', 
        'latitude', 'longitude', 'code_commune', 'nom_commune_complet', 
        'code_departement', 'nom_departement', 'code_region', 'nom_region'
    ]
    df_communes_clean = df_communes[columns_to_keep_communes].copy()
    df_communes_clean['code_commune_INSEE'] = df_communes_clean['code_commune_INSEE'].astype(str)

    # Fusionner les deux datasets (pr√©sidentiel et communes) sur les codes INSEE et combin√©
    df_combined = pd.merge(
        df_presidentielle_clean, 
        df_communes_clean, 
        left_on='code_commune_combined', 
        right_on='code_commune_INSEE', 
        how='left'  # Jointure gauche pour conserver toutes les donn√©es pr√©sidentielles
    )

    # Stocker les datasets nettoy√©s et fusionn√©s dans l'√©tat de la session Streamlit
    st.session_state['df_presidentielle_clean'] = df_presidentielle_clean
    st.session_state['df_communes_clean'] = df_communes_clean
    st.session_state['df'] = df_combined
    
    return df_presidentielle_brut, df_presidentielle_clean, df_communes_clean, df_combined

def show_analysis():
    """
    Affiche la page d'analyse sur Streamlit, incluant les datasets bruts, nettoy√©s et fusionn√©s.
    """
    st.title("Page d'Analyse üìä")

    # Chemins vers les fichiers de donn√©es
    presidentielle_path = "./Presidentielle_2017_Resultats_Communes_Tour_1_c.xls"
    commune_path = "./communes-departement-region.csv"

    # Afficher les datasets bruts avant le nettoyage
    st.header("Donn√©es Brutes et Apr√®s Nettoyage")
    
    # Charger les datasets bruts et nettoy√©s
    df_presidentielle_brut, df_presidentielle_clean, df_communes_clean, df_combined = load_and_clean_data(presidentielle_path, commune_path)

    # Afficher les premi√®res lignes du dataset pr√©sidentiel brut (sans skiprows)
    st.subheader("Donn√©es Brutes des √âlections Pr√©sidentielles (Sans Ignorer les 3 premi√®res lignes)")
    st.write(df_presidentielle_brut.head(10))

    # Afficher les premi√®res lignes du dataset pr√©sidentiel apr√®s 'skiprows'
    st.subheader("Donn√©es des √âlections Pr√©sidentielles (Apr√®s Ignorance des 3 premi√®res lignes)")
    st.write(df_presidentielle_clean.head(10))

    # Afficher les premi√®res lignes du dataset des communes brut
    st.subheader("Donn√©es Brutes des Communes (10 premi√®res lignes)")
    st.write(df_communes_clean.head(10))

    # Afficher les premi√®res lignes du dataset fusionn√©
    st.subheader("Donn√©es Fusionn√©es (10 premi√®res lignes)")
    st.write(df_combined.head(10))

    # V√©rification de l'agr√©gation des votes par d√©partement
    st.header("V√©rification de l'Agr√©gation des Votes par D√©partement")
    verify_aggregation(df_combined)

def verify_aggregation(df_combined):
    """
    Agr√®ge les votes par d√©partement et affiche les 10 d√©partements avec le plus de voix.
    """
    # Agr√©ger les votes par d√©partement
    df_agg = df_combined.groupby('Code du d√©partement')['Voix'].sum().reset_index()

    # Trier les d√©partements par le nombre de voix et afficher les 10 premiers
    df_top_departments = df_agg.sort_values(by='Voix', ascending=False).head(10)
    st.write("Top 10 des d√©partements avec le plus de voix apr√®s agr√©gation :")
    st.write(df_top_departments)
